package com.briup.gather;

import com.briup.entity.Environment;

import java.io.BufferedReader;
import java.io.FileReader;
import java.sql.Timestamp;

/**
 * @Auther: vanse(lc)
 * @Date: 2023/9/21-09-21-09:21
 * @Description：com.briup.gather
 */
public class GatherImpl {
    /**
     * 100|101|2|16|1|3|5d606f7802|1|1516323596029
     * 把所有数据行放到存储环境对象的容器Collection-> List中
     *  一行 一个环境对象
     *     9列    10个属性
     */
    public void gatherData(){
        try {
            // 1.读取文件 文件字符输入流  |  类加载器
                // io 输入输出 字节字符
                // 基本流 文件流 内存流
                // 包装流 缓冲 转换流 标准流 任意流 对象流
//            FileReader fileReader = new FileReader("src/main/resources/data-file-simple");
            BufferedReader br = new BufferedReader(new FileReader("src/main/resources/data-file-simple"));
//        GatherImpl.class.getClassLoader().getResourceAsStream()
            // 2.循环文件中的每一行 将每一行封装成环境对象
            String line;
            while( (line =  br.readLine()) != null ){
                 // br.readLine(); // 第二次读取
//                System.out.println("line = " + line);
                // 100|101|2|16|1|3|5d606f7802|1|1516323596029  -> Environment对象
                // 一行的每列数据
                String[] lineArr = line.split("\\|");
//                System.out.println(Arrays.toString(lineArr));
                Environment environment = new Environment();
                environment.setSrcId(lineArr[0]);
                environment.setDesId(lineArr[1]);
                environment.setDevId(lineArr[2]);
                environment.setSensorAddress(lineArr[3]); // 环境传感器
                environment.setCount(Integer.parseInt(lineArr[4]));
                environment.setCmd(lineArr[5]);
                environment.setStatus(Integer.parseInt(lineArr[7]));
                environment.setGatherDate(new Timestamp(Long.parseLong(lineArr[8])));  // 字符串-> long -> Timestamp
//                environment.setName(); // 传感器种类
//                environment.setData(lineArr[6]); // 环境数值
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }
    }



}
