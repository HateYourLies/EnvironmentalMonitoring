package com.briup.gather;

import com.briup.entity.Environment;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

/**
 * @Auther: vanse(lc)
 * @Date: 2023/9/21-09-21-09:21
 * @Description：com.briup.gather
 */
public class GatherImpl {
    /**
     * 100|101|2|16|1|3|5d606f7802|1|1516323596029
     * 把所有数据行放到存储环境对象的容器Collection-> List中
     *  一行 一个环境对象
     *     9列    10个属性
     */
    public List<Environment> gatherData(){
        BufferedReader br = null;
        try {
            // 1.读取文件 文件字符输入流  |  类加载器
            // io 输入输出 字节字符
            // 基本流 文件流 内存流
            // 包装流 缓冲 转换流 标准流 任意流 对象流
//            FileReader fileReader = new FileReader("src/main/resources/data-file-simple");
            br = new BufferedReader(new FileReader("src/main/resources/data-file"));
//        GatherImpl.class.getClassLoader().getResourceAsStream()
            // 2.循环文件中的每一行 将每一行封装成环境对象
            String line;
            List<Environment> environmentList = new ArrayList<>();
            while( (line =  br.readLine()) != null ){
                 // br.readLine(); // 第二次读取
//                System.out.println("line = " + line);
                // 100|101|2|16|1|3|5d606f7802|1|1516323596029  -> Environment对象
                // 一行的每列数据
                String[] lineArr = line.split("\\|");
//                System.out.println(Arrays.toString(lineArr));
                Environment environment = new Environment();
                environment.setSrcId(lineArr[0]);
                environment.setDesId(lineArr[1]);
                environment.setDevId(lineArr[2]);
                environment.setSensorAddress(lineArr[3]); // 环境传感器 16 256 1280
                environment.setCount(Integer.parseInt(lineArr[4]));
                environment.setCmd(lineArr[5]);
                environment.setStatus(Integer.parseInt(lineArr[7]));
                environment.setGatherDate(new Timestamp(Long.parseLong(lineArr[8])));  // 字符串-> long -> Timestamp
                String originData = lineArr[6];
                switch (environment.getSensorAddress()){
                    // 3.将所有的环境对象用容器装取
                    case "16" :
                        environment.setName("温度"); // 传感器种类 date  |
                        // 5d60   6f7802 1个字节是8位    0000 | 0001  2个16进制位
                        // 5d60 -> 10进制整数 -> 计算公式
//                        String dataStr = originData.substring(0, 4);
//                        int i = Integer.parseInt(dataStr, 16);
                        environment.setData((Integer.parseInt(originData.substring(0, 4), 16)*(0.00268127F))-46.85F); // 环境数值

                        Environment environment2 = new Environment(); // 湿度对象
                        environment2.setName("湿度");
                        // 6f78 -> 10进制整数 -> 计算公式
                        environment2.setData((Integer.parseInt(originData.substring(4, 8), 16)*(0.00190735F))-6); // 环境数值
                        environment2.setSrcId(lineArr[0]);
                        environment2.setDesId(lineArr[1]);
                        environment2.setDevId(lineArr[2]);
                        environment2.setSensorAddress(lineArr[3]); // 环境传感器 16 256 1280
                        environment2.setCount(Integer.parseInt(lineArr[4]));
                        environment2.setCmd(lineArr[5]);
                        environment2.setStatus(Integer.parseInt(lineArr[7]));
                        environment2.setGatherDate(new Timestamp(Long.parseLong(lineArr[8])));  // 字符串-> long -> Timestamp
                        environmentList.add(environment2);
                        break;
                    case "256" :
                        environment.setName("光照"); // 传感器种类
                        // 6f78 -> 10进制整数
                        environment.setData(Integer.parseInt(originData.substring(0,4),16)); // 环境数值
                        break;
                    case "1280" :
                        environment.setName("二氧化碳"); // 传感器种类
                        // 6f78 -> 10进制整数
                        environment.setData(Integer.parseInt(originData.substring(0,4),16)); // 环境数值
                        break;
                }
                environmentList.add(environment);
            }
            return environmentList;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return null;
    }



}
